"""Basic level content for the Linux TUI Tutorial"""


class BasicTopicsContent:
    """Content for basic Linux topics"""
    
    @staticmethod
    def get_menu_content() -> str:
        """Get the basic topics menu content"""
        return """
üì∞ Basic Topics Menu

Select a subtopic to begin learning:

üìÅ File Commands
Learn essential file operations like creating, copying, moving, and deleting files.
Commands: touch, cp, mv, rm, mkdir

üìÇ Directory Navigation  
Master navigating the Linux file system and understanding directory structures.
Commands: cd, ls, pwd, find, tree

üëÅÔ∏è File Viewing
Discover different ways to view and examine file contents.
Commands: cat, less, more, head, tail, grep

üîí Permissions
Understand Linux file permissions and ownership concepts.
Commands: chmod, chown, chgrp, umask

Click on a subtopic or use arrow keys to navigate and press Enter to select.
Press Escape or click '‚Üê Back' to return to the main menu.
        """
    
    @staticmethod
    def get_topic_content(topic_id: str) -> str:
        """Get content for a specific basic topic"""
        content_map = {
            "files": BasicTopicsContent._get_files_content(),
            "nav": BasicTopicsContent._get_navigation_content(),
            "view": BasicTopicsContent._get_viewing_content(),
            "perms": BasicTopicsContent._get_permissions_content(),
        }
        return content_map.get(topic_id, f"Content for {topic_id} coming soon!")
    
    @staticmethod
    def _get_files_content() -> str:
        """File commands content"""
        return """
üìÅ File Commands - Basic File Operations

Essential commands for creating, copying, moving, and deleting files:

üÜï Creating Files and Directories:
‚Ä¢ touch filename.txt - Create an empty file
‚Ä¢ touch file1.txt file2.txt file3.txt - Create multiple files
‚Ä¢ mkdir directory_name - Create a new directory
‚Ä¢ mkdir -p path/to/nested/dirs - Create nested directories
‚Ä¢ mkdir dir1 dir2 dir3 - Create multiple directories

üìã Copying Files and Directories:
‚Ä¢ cp source.txt destination.txt - Copy a file
‚Ä¢ cp source.txt /path/to/directory/ - Copy file to directory
‚Ä¢ cp -r source_dir/ dest_dir/ - Copy directory recursively
‚Ä¢ cp -i source.txt dest.txt - Interactive copy (ask before overwrite)
‚Ä¢ cp -v source.txt dest.txt - Verbose copy (show what's happening)
‚Ä¢ cp -p source.txt dest.txt - Preserve timestamps and permissions

üöö Moving and Renaming:
‚Ä¢ mv old_name.txt new_name.txt - Rename a file
‚Ä¢ mv file.txt /path/to/directory/ - Move file to directory
‚Ä¢ mv dir1/ /path/to/new/location/ - Move directory
‚Ä¢ mv -i source.txt dest.txt - Interactive move (ask before overwrite)
‚Ä¢ mv *.txt /backup/ - Move all .txt files to backup directory

üóëÔ∏è Removing Files and Directories:
‚Ä¢ rm filename.txt - Remove a file
‚Ä¢ rm file1.txt file2.txt - Remove multiple files
‚Ä¢ rm -i filename.txt - Remove with confirmation prompt
‚Ä¢ rm -r directory/ - Remove directory recursively
‚Ä¢ rm -rf directory/ - Force remove directory (be careful!)
‚Ä¢ rmdir empty_directory - Remove empty directory only

üîç Useful File Operations:
‚Ä¢ ls -la - List files with detailed information
‚Ä¢ file filename.txt - Determine file type
‚Ä¢ stat filename.txt - Show detailed file statistics
‚Ä¢ wc filename.txt - Count lines, words, and characters
‚Ä¢ du -h filename.txt - Show file size in human-readable format
‚Ä¢ df -h - Show disk space usage

‚ö†Ô∏è Safety Tips:
‚Ä¢ Always use -i flag when removing important files
‚Ä¢ Double-check paths before using rm -r or rm -rf
‚Ä¢ Use ls to verify file locations before operations
‚Ä¢ Test commands on unimportant files first
‚Ä¢ Consider using trash-cli instead of rm for safety

üí° Pro Tips:
‚Ä¢ Use Tab completion to avoid typos in filenames
‚Ä¢ Wildcards: * (any characters), ? (single character)
‚Ä¢ Use quotes for filenames with spaces: "my file.txt"
‚Ä¢ Combine commands: mkdir project && cd project

[Interactive exercises and quizzes coming soon!]

Press Escape to return to Basic Topics menu.
        """
    
    @staticmethod
    def _get_navigation_content() -> str:
        """Directory navigation content"""
        return """
üìÇ Directory Navigation - Moving Around the File System

Master the art of navigating Linux directories and file system:

üß≠ Basic Navigation Commands:
‚Ä¢ pwd - Print working directory (where am I?)
‚Ä¢ cd directory_name - Change to a specific directory
‚Ä¢ cd .. - Move up one directory level
‚Ä¢ cd ../.. - Move up two directory levels
‚Ä¢ cd ~ - Go to home directory
‚Ä¢ cd / - Go to root directory
‚Ä¢ cd - - Go to previous directory

üìã Listing Directory Contents:
‚Ä¢ ls - List files and directories in current location
‚Ä¢ ls -l - Long format listing with permissions and details
‚Ä¢ ls -la - List all files including hidden ones (starting with .)
‚Ä¢ ls -lh - List with human-readable file sizes
‚Ä¢ ls -lt - Sort by modification time (newest first)
‚Ä¢ ls -lS - Sort by file size (largest first)
‚Ä¢ ls -R - Recursive listing of subdirectories

üîç Finding Files and Directories:
‚Ä¢ find /path -name "filename" - Search for files by name
‚Ä¢ find . -name "*.txt" - Find all .txt files in current directory
‚Ä¢ find /home -type d -name "Documents" - Find directories named Documents
‚Ä¢ find . -size +100M - Find files larger than 100MB
‚Ä¢ find . -mtime -7 - Find files modified in last 7 days
‚Ä¢ locate filename - Quick file search using database
‚Ä¢ which command_name - Find location of a command
‚Ä¢ whereis command_name - Find binary, source, and manual pages

üìÅ Understanding Directory Structure:
‚Ä¢ / - Root directory (top of filesystem)
‚Ä¢ /home - User home directories
‚Ä¢ /etc - System configuration files
‚Ä¢ /var - Variable data (logs, databases)
‚Ä¢ /tmp - Temporary files
‚Ä¢ /usr - User programs and data
‚Ä¢ /bin - Essential user binaries
‚Ä¢ /sbin - System administration binaries

üå≥ Advanced Navigation:
‚Ä¢ tree - Display directory structure as a tree
‚Ä¢ tree -L 2 - Limit tree depth to 2 levels
‚Ä¢ tree -a - Show hidden files in tree
‚Ä¢ dirs - Show directory stack
‚Ä¢ pushd /path - Push directory onto stack and cd to it
‚Ä¢ popd - Pop directory from stack and cd to it

üí° Navigation Shortcuts and Tips:
‚Ä¢ Tab completion - Press Tab to auto-complete paths
‚Ä¢ .. means parent directory, . means current directory
‚Ä¢ ~ is your home directory shortcut
‚Ä¢ Use / at the start for absolute paths
‚Ä¢ No / at start means relative path from current location
‚Ä¢ Use history to see previous commands: history | grep cd

üîß Path and Environment:
‚Ä¢ echo $HOME - Show home directory path
‚Ä¢ echo $PWD - Show current directory
‚Ä¢ echo $PATH - Show command search paths
‚Ä¢ export PATH=$PATH:/new/path - Add directory to PATH
‚Ä¢ basename /path/to/file.txt - Get filename from path
‚Ä¢ dirname /path/to/file.txt - Get directory from path

üóÇÔ∏è Working with Multiple Locations:
‚Ä¢ ls /path1 /path2 - List contents of multiple directories
‚Ä¢ cd /path && ls - Change directory and list contents
‚Ä¢ (cd /tmp && ls) - Execute commands in subshell
‚Ä¢ pushd /dir1; pushd /dir2; popd; popd - Directory stack

[Interactive navigation practice coming soon!]

Press Escape to return to Basic Topics menu.
        """
    
    @staticmethod
    def _get_viewing_content() -> str:
        """File viewing content"""
        return """
üëÅÔ∏è File Viewing - Examining File Contents

Learn different ways to view and examine files safely and effectively:

üìñ Basic File Viewing:
‚Ä¢ cat filename.txt - Display entire file contents
‚Ä¢ cat file1.txt file2.txt - Display multiple files
‚Ä¢ cat -n filename.txt - Show line numbers
‚Ä¢ tac filename.txt - Display file in reverse order
‚Ä¢ less filename.txt - View file page by page (recommended)
‚Ä¢ more filename.txt - Similar to less, but simpler

üîç Partial File Viewing:
‚Ä¢ head filename.txt - Show first 10 lines
‚Ä¢ head -n 20 file.txt - Show first 20 lines
‚Ä¢ head -c 100 file.txt - Show first 100 characters
‚Ä¢ tail filename.txt - Show last 10 lines
‚Ä¢ tail -n 5 file.txt - Show last 5 lines
‚Ä¢ tail -f logfile.txt - Follow file changes in real-time
‚Ä¢ tail -F logfile.txt - Follow file even if it‚Äôs rotated

üîé Searching File Contents:
‚Ä¢ grep pattern filename.txt - Search for pattern in file
‚Ä¢ grep -i pattern filename.txt - Case-insensitive search
‚Ä¢ grep -r pattern /path - Recursive search in directory
‚Ä¢ grep -n pattern filename.txt - Show line numbers
‚Ä¢ grep -v pattern filename.txt - Show lines not matching pattern
‚Ä¢ grep -c pattern filename.txt - Count matching lines
‚Ä¢ egrep "pattern1|pattern2" file.txt - Search multiple patterns
‚Ä¢ fgrep "literal string" file.txt - Literal string search

üìÑ Advanced File Viewing:
‚Ä¢ view filename.txt - Open file in read-only vi/vim
‚Ä¢ nano filename.txt - Open file in nano editor (read-only with Ctrl+R)
‚Ä¢ vim -R filename.txt - Open file in read-only mode
‚Ä¢ less +F filename.txt - Start less in follow mode (like tail -f)
‚Ä¢ cut -d',' -f1 file.csv - Extract first column from CSV
‚Ä¢ sort filename.txt - Sort file contents
‚Ä¢ uniq filename.txt - Remove duplicate lines
‚Ä¢ wc -l filename.txt - Count lines in file

üîß File Type and Metadata:
‚Ä¢ file filename - Determine file type
‚Ä¢ stat filename.txt - Show file metadata (size, permissions, timestamps)
‚Ä¢ xxd filename - Display file in hexadecimal
‚Ä¢ od -tx4 filename - Display file in octal or hex
‚Ä¢ strings filename - Extract printable strings from binary files

üí° Tips for Effective Viewing:
‚Ä¢ Use less for large files (faster than cat)
‚Ä¢ Press q to quit less or more
‚Ä¢ In less: /pattern to search, n for next match, N for previous
‚Ä¢ Combine with pipes: cat file.txt | grep pattern | less
‚Ä¢ Use -F with tail for log files that rotate
‚Ä¢ Save output: grep pattern file.txt > output.txt
‚Ä¢ Use Tab completion to avoid typos in filenames

‚ö†Ô∏è Safety Tips:
‚Ä¢ Avoid cat for binary files (use strings or file instead)
‚Ä¢ Use less or more for large files to avoid terminal overload
‚Ä¢ Double-check file paths before viewing
‚Ä¢ Be cautious with sensitive files (e.g., /etc/passwd)

[Interactive file viewing exercises coming soon!]

Press Escape to return to Basic Topics menu.
        """
    
    @staticmethod
    def _get_permissions_content() -> str:
        """Permissions content"""
        return """
üîí Permissions - File and Directory Access Control

Understand Linux file permissions and ownership concepts:

üîê Understanding Permissions:
‚Ä¢ ls -l - Show permissions, owner, and group
‚Ä¢ Permissions format: rwxr-xr-x (owner, group, others)
‚Ä¢ r = read (4), w = write (2), x = execute (1)
‚Ä¢ Example: rwxr-xr-x = 755 (owner: 7, group: 5, others: 5)
‚Ä¢ - = regular file, d = directory, l = symbolic link

üë§ Changing File Ownership:
‚Ä¢ chown username filename.txt - Change file owner
‚Ä¢ chown username:groupname filename.txt - Change owner and group
‚Ä¢ chown -R username:groupname directory/ - Recursive change
‚Ä¢ chgrp groupname filename.txt - Change group only
‚Ä¢ chgrp -R groupname directory/ - Recursive group change
‚Ä¢ chown -h username link - Change symbolic link ownership

üîß Modifying Permissions:
‚Ä¢ chmod 755 filename - Set permissions numerically (rwxr-xr-x)
‚Ä¢ chmod u+rwx,g+rx,o+rx filename - Set permissions symbolically
‚Ä¢ chmod -R 644 directory/ - Recursive permissions change
‚Ä¢ chmod u+x script.sh - Add execute permission for owner
‚Ä¢ chmod g-w filename - Remove write for group
‚Ä¢ chmod o-rwx filename - Remove all permissions for others

üìå Special Permissions:
‚Ä¢ chmod u+s filename - Set SUID (run as owner)
‚Ä¢ chmod g+s directory - Set SGID (inherit group for new files)
‚Ä¢ chmod +t directory - Set sticky bit (only owner can delete)
‚Ä¢ Example: rwxr-sr-t = SUID and sticky bit set
‚Ä¢ ls -l /usr/bin/passwd - See SUID in action (rwsr-xr-x)

üé≠ Default Permissions with umask:
‚Ä¢ umask - Show current umask value
‚Ä¢ umask 022 - Set umask (new files: 644, directories: 755)
‚Ä¢ umask 027 - Restrict others (new files: 640, directories: 750)
‚Ä¢ umask -S - Show umask symbolically
‚Ä¢ echo "umask 022" >> ~/.bashrc - Set permanent umask

üîç Viewing Permissions:
‚Ä¢ ls -l filename - Show permissions and ownership
‚Ä¢ stat filename - Detailed permission and metadata
‚Ä¢ getfacl filename - Show Access Control Lists (if used)
‚Ä¢ namei -f /path/to/file - Show permissions along path
‚Ä¢ lsattr filename - List extended attributes

üí° Permissions Tips:
‚Ä¢ Use numeric mode for quick changes (e.g., 755, 644)
‚Ä¢ Symbolic mode is more readable: u=user, g=group, o=others
‚Ä¢ SUID/SGID useful for scripts and shared directories
‚Ä¢ Sticky bit common for /tmp (drwxrwxrwt)
‚Ä¢ Always verify with ls -l after changes

‚ö†Ô∏è Safety Tips:
‚Ä¢ Avoid 777 permissions unless absolutely necessary
‚Ä¢ Be cautious with SUID/SGID (security risks)
‚Ä¢ Test permission changes on non-critical files
‚Ä¢ Use chown/chmod -R carefully to avoid affecting unintended files
‚Ä¢ Backup important files before modifying permissions

[Interactive permissions exercises coming soon!]

Press Escape to return to Basic Topics menu.
        """
